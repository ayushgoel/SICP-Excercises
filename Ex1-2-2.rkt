#lang planet neil/sicp

;; 1.21
(define (square x) (* x x))
(define (divides? a b)
  (= (remainder b a) 0))
(define (smallest-divisor n)
  (find-divisor n 2))
(define (find-divisor n test-divisor)
  (cond ((> (square test-divisor) n) n)
        ((divides? test-divisor n) test-divisor)
        (else (find-divisor n (+ test-divisor 1)))))
(smallest-divisor 199)
(smallest-divisor 1999)
(smallest-divisor 19999)

;; 1.22
(define (prime? n)
  (= n (smallest-divisor n)))
(define (timed-prime-test n)
  (newline)
  (start-prime-test n (runtime)))
(define (start-prime-test n start-time)
  (if (prime? n)
      (report-prime n (- (runtime) start-time))
      (start-prime-test (+ n 2) (runtime))))
(define (report-prime n elapsed-time)
  (display n)
  (display " *** ")
  (display elapsed-time)
  (newline))

(define (get-first-odd n) 
  (if (even? n)
      (+ n 1)
      n))
(define (search-prime n) 
  (if (timed-prime-test n) 
      n
      (search-prime (+ n 2))))
(define (search-for-prime n) (search-prime (get-first-odd n)))
(search-for-prime 100)
(search-for-prime 1000)
;(search-for-prime 10000)
;(search-for-prime 100000)
;(search-for-prime 1000000)
;(search-for-prime 10000000)
;(search-for-prime 100000000)
;(search-for-prime 1000000000)
;(search-for-prime 10000000000)

;; 1.23
(define (next n) 
  (if (= n 2)
      3
      (+ n 2)))
(define (new-smallest-divisor n)
  (new-find-divisor n 2))
(define (new-find-divisor n test-divisor)
  (cond ((> (square test-divisor) n) n)
        ((divides? test-divisor n) test-divisor)
        (else (find-divisor n (next test-divisor)))))
;(new-smallest-divisor 23)
(define (new-prime? n)
  (= n (new-smallest-divisor n)))
(define (new-timed-prime-test n)
  (newline)
  (display n)
  (new-start-prime-test n (runtime)))
(define (new-start-prime-test n start-time)
  (if (new-prime? n)
      (report-prime (- (runtime) start-time))
      (timed-prime-test (+ n 2))))
;(new-timed-prime-test 1009)
;(timed-prime-test 1009)